<?xml version="1.0" encoding="UTF-8"?>

<project name="ParallelDownloader" default="build">
	<!-- Properties -->
	<property environment="env"/>
	<property name="javac.debug" value="false" />
	<property name="javac.debugLevel" value="lines,var,source" />
	<property name="javac.encoding" value="UTF-8" />
	<property name="javac.failOnError" value="true" />
	<property name="javac.includeAntRuntime" value="false" />
	<property name="javac.listFiles" value="false" />
	<property name="javac.source" value="1.7" />
	<property name="javac.target" value="1.7" />
	<property name="javac.verbose" value="false" />

	<!--	-Xlint:all			enable all warnings -->
	<!--	-Xmaxerrs n			show max "n" errors -->
	<!--	-Xmaxwarns n		show max "n" warnings -->
	<property name="javac.compilerArg" value="-Xlint:all -Xmaxerrs 999 -Xmaxwarns 999" />


	<!-- Path -->
	<path id="ParallelDownloader.classpath">
		<pathelement location="bin"/>
		<pathelement location="lib/commons-logging-1.1.3.jar"/>
		<pathelement location="lib/httpclient-4.2.5.jar"/>
		<pathelement location="lib/httpcore-4.2.4.jar"/>
	</path>


	<!-- Target:  init -->
	<target name="init">
		<mkdir dir="bin"/>
		<mkdir dir="doc"/>
	</target>


	<!-- Target:  build -->
	<target depends="init" name="build">
		<javac debug="${javac.debug}"
			   debugLevel="${javac.debugLevel}"
			   encoding="${javac.encoding}"
			   failonerror="${javac.failOnError}"
			   includeAntRuntime="${javac.includeAntRuntime}"
			   listfiles="${javac.listFiles}"
			   source="${javac.source}"
			   target="${javac.target}"
			   verbose="${javac.verbose}"
			   srcdir="src"
			   destdir="bin">
			<classpath refid="ParallelDownloader.classpath"/>
			<compilerarg line="${javac.compilerArg}"/>
		</javac>
	</target>


	<target name="javadoc" depends="build">
		<javadoc sourcepath="src"
				 destdir="doc"
				 verbose="${javac.verbose}"
				 encoding="${javac.encoding}"
				 version="true"
				 author="true"
				 failonerror="${javac.failOnError}"
				 source="${javac.source}"
				 access="private"
				 classpath="lib"/>
	</target>


	<!--
			  ===============
			  STATIC ANALYSIS
			  ===============
	 -->


	<target name="static-analysis" depends="build,checkstyle,findbugs,pmd">
		<echo message="Static Analysis complete!"/>
	</target>


	<!-- Checkstyle -->


	<property name="checkstyle.home" value="/opt/COTS/defaults/checkstyle"/>
	<property name="checkstyle.out" value="checkstyle-result.xml"/>

	<target name="checkstyle" depends="build">
		<taskdef resource="checkstyletask.properties">
			<classpath path="${checkstyle.home}/checkstyle-5.6-all.jar"/>
		</taskdef>

		<checkstyle config="${checkstyle.home}/sun_checks.xml"
					failOnViolation="false">
			<fileset dir="src">
				<include name="**/*.java"/>
			</fileset>
			<formatter type="xml" toFile="${checkstyle.out}"/>
		</checkstyle>
	</target>


	<!-- FindBugs -->


	<property name="findbugs.home" value="/opt/COTS/defaults/findbugs"/>
	<property name="findbugs.out" value="findbugs-result.xml"/>

	<target name="findbugs" depends="build">
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
			<classpath path="${findbugs.home}/lib/findbugs-ant.jar"/>
		</taskdef>

		<findbugs home="${findbugs.home}"
				  effort="max"
				  output="xml"
				  outputFile="${findbugs.out}"
				  sourcepath="src">
			<fileset dir="bin">
				<include name="**/*.class"/>
			</fileset>
		</findbugs>
	</target>


	<!-- PMD -->


	<property name="pmd.home" value="/opt/COTS/defaults/pmd"/>
	<property name="pmd.out" value="pmd-result.xml"/>

	<target name="pmd" depends="build">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
			<classpath>
				<pathelement location="${pmd.home}/lib/pmd-5.0.4.jar"/>
				<pathelement location="${pmd.home}/lib/jaxen-1.1.1.jar"/>
				<pathelement location="${pmd.home}/lib/asm-3.2.jar"/>
			</classpath>
		</taskdef>

		<pmd shortFilenames="false">
			<ruleset>java-basic</ruleset>
			<ruleset>java-braces</ruleset>
			<ruleset>java-clone</ruleset>
			<ruleset>java-codesize</ruleset>
			<ruleset>java-design</ruleset>
			<ruleset>java-empty</ruleset>
			<ruleset>java-finalizers</ruleset>
			<ruleset>java-imports</ruleset>
			<ruleset>java-junit</ruleset>
			<ruleset>java-migrating</ruleset>
			<ruleset>java-naming</ruleset>
			<ruleset>java-optimizations</ruleset>
			<ruleset>java-strictexception</ruleset>
			<ruleset>java-strings</ruleset>
			<ruleset>java-sunsecure</ruleset>
			<ruleset>java-typeresolution</ruleset>
			<ruleset>java-unnecessary</ruleset>
			<ruleset>java-unusedcode</ruleset>
			<formatter type="xml" toFile="${pmd.out}"/>
			<fileset dir="src">
				<include name="**/*.java"/>
			</fileset>
		</pmd>
	</target>


	<!-- Target:  clean -->
	<target name="clean">
		<delete dir="bin"/>
		<delete dir="doc"/>
		<delete file="${checkstyle.out}"/>
		<delete file="${findbugs.out}"/>
		<delete file="${pmd.out}"/>
	</target>


	<!-- Target:  downloader -->
	<target name="downloader" depends="build">
		<java classname="com.marcschweikert.ParallelDownloaderMain" failonerror="true" fork="yes">
			<classpath refid="ParallelDownloader.classpath"/>
		</java>
	</target>
</project>
